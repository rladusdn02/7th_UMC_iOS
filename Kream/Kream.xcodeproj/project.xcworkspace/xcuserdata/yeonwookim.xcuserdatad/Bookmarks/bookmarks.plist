<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>top-level-items</key>
	<array>
		<dict>
			<key>children</key>
			<array>
				<dict>
					<key>destination</key>
					<dict>
						<key>location-parameters</key>
						<dict>
							<key>EndingColumnNumber</key>
							<string>0</string>
							<key>EndingLineNumber</key>
							<string>16</string>
							<key>StartingColumnNumber</key>
							<string>0</string>
							<key>StartingLineNumber</key>
							<string>15</string>
							<key>Timestamp</key>
							<string>753258820.29877</string>
						</dict>
						<key>rebasable-url</key>
						<dict>
							<key>base</key>
							<string>workspace</string>
							<key>payload</key>
							<dict>
								<key>relative-path</key>
								<string>Kream/Models/GoodsModel.swift</string>
							</dict>
						</dict>
					</dict>
					<key>text-context</key>
					<dict>
						<key>focused</key>
						<string>// TODO: - 상품이름 및 설명, 가격, 북마크 아이콘 구현 필요
</string>
						<key>leading</key>
						<string>}

</string>
						<key>trailing</key>
						<string>final class dummySavedModel {
    static let savedDatas: [GoodsModel] = [
        GoodsModel(goodsImg: "saved1.png", goodsName: "상품 1"),
</string>
					</dict>
					<key>type</key>
					<string>bookmark</string>
				</dict>
				<dict>
					<key>destination</key>
					<dict>
						<key>location-parameters</key>
						<dict>
							<key>EndingColumnNumber</key>
							<string>0</string>
							<key>EndingLineNumber</key>
							<string>57</string>
							<key>StartingColumnNumber</key>
							<string>0</string>
							<key>StartingLineNumber</key>
							<string>56</string>
							<key>Timestamp</key>
							<string>750253344.479229</string>
						</dict>
						<key>rebasable-url</key>
						<dict>
							<key>base</key>
							<string>workspace</string>
							<key>payload</key>
							<dict>
								<key>relative-path</key>
								<string>Kream/Views/SavedView.swift</string>
							</dict>
						</dict>
					</dict>
					<key>text-context</key>
					<dict>
						<key>focused</key>
						<string>    // TODO: - countlabel 구현할것
</string>
						<key>leading</key>
						<string>        return label
    }()
</string>
						<key>trailing</key>
						<string>    private lazy var goodsCountLabel: UILabel = {
        let label = UILabel()
        label.text = "전체 8개"
</string>
					</dict>
					<key>type</key>
					<string>bookmark</string>
				</dict>
				<dict>
					<key>destination</key>
					<dict>
						<key>location-parameters</key>
						<dict>
							<key>EndingColumnNumber</key>
							<string>0</string>
							<key>EndingLineNumber</key>
							<string>22</string>
							<key>StartingColumnNumber</key>
							<string>0</string>
							<key>StartingLineNumber</key>
							<string>21</string>
							<key>Timestamp</key>
							<string>750253349.212882</string>
						</dict>
						<key>rebasable-url</key>
						<dict>
							<key>base</key>
							<string>workspace</string>
							<key>payload</key>
							<dict>
								<key>relative-path</key>
								<string>Kream/Views/SavedView.swift</string>
							</dict>
						</dict>
					</dict>
					<key>text-context</key>
					<dict>
						<key>focused</key>
						<string>    // TODO: - 한 화면에 표시되지 않는 경우 scroll가능하도록 수정
</string>
						<key>leading</key>
						<string>    }
    //MARK: - Saved 탭 화면 구성
</string>
						<key>trailing</key>
						<string>    private func setViews(){
        self.addSubview(titleLabel)
        self.addSubview(goodsCountLabel)
</string>
					</dict>
					<key>type</key>
					<string>bookmark</string>
				</dict>
				<dict>
					<key>destination</key>
					<dict>
						<key>location-parameters</key>
						<dict>
							<key>EndingColumnNumber</key>
							<string>0</string>
							<key>EndingLineNumber</key>
							<string>81</string>
							<key>StartingColumnNumber</key>
							<string>0</string>
							<key>StartingLineNumber</key>
							<string>80</string>
							<key>Timestamp</key>
							<string>750151494.977217</string>
						</dict>
						<key>rebasable-url</key>
						<dict>
							<key>base</key>
							<string>workspace</string>
							<key>payload</key>
							<dict>
								<key>relative-path</key>
								<string>Kream/Views/MyView.swift</string>
							</dict>
						</dict>
					</dict>
					<key>text-context</key>
					<dict>
						<key>focused</key>
						<string>        // TODO: - myPage 상단 버튼 구현
</string>
						<key>leading</key>
						<string>        let setBtn = UIButton()
        setBtn.setTitle("", for: .normal)
</string>
						<key>trailing</key>
						<string>//        setBtn.addTarget(, action: , for: ) -&gt; 추후 구현
        setBtn.setBackgroundImage(UIImage(named: "setting_btn"), for: .normal)
        view.addSubview(setBtn)
</string>
					</dict>
					<key>type</key>
					<string>bookmark</string>
				</dict>
			</array>
			<key>title</key>
			<string>TODO</string>
			<key>type</key>
			<string>group</string>
		</dict>
		<dict>
			<key>children</key>
			<array>
				<dict>
					<key>destination</key>
					<dict>
						<key>location-parameters</key>
						<dict>
							<key>EndingColumnNumber</key>
							<string>0</string>
							<key>EndingLineNumber</key>
							<string>23</string>
							<key>StartingColumnNumber</key>
							<string>0</string>
							<key>StartingLineNumber</key>
							<string>22</string>
							<key>Timestamp</key>
							<string>750153161.623564</string>
						</dict>
						<key>rebasable-url</key>
						<dict>
							<key>base</key>
							<string>workspace</string>
							<key>payload</key>
							<dict>
								<key>relative-path</key>
								<string>Kream/ViewControllers/LoginViewController.swift</string>
							</dict>
						</dict>
					</dict>
					<key>text-context</key>
					<dict>
						<key>focused</key>
						<string>// safeArea확인 코드
</string>
						<key>leading</key>
						<string>        return loginView
    }()
</string>
						<key>trailing</key>
						<string>//    override func viewDidLayoutSubviews() {
//        super.viewDidLayoutSubviews()
//        
</string>
					</dict>
					<key>type</key>
					<string>bookmark</string>
				</dict>
				<dict>
					<key>children</key>
					<array/>
					<key>title</key>
					<string>개념 메모</string>
					<key>type</key>
					<string>group</string>
				</dict>
			</array>
			<key>title</key>
			<string>참고 코드</string>
			<key>type</key>
			<string>group</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>10</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>9</string>
					<key>Timestamp</key>
					<string>750156104.977935</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Kream/Models/GoodsModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>/// model - struct : 값 타입. 구조체의 인스턴스를 복사할 때 마다 별도의 복사본 생성. 복사된 인스턴스는 원본과 독립적
</string>
				<key>leading</key>
				<string>import Foundation

</string>
				<key>trailing</key>
				<string>struct GoodsModel {
    let goodsImg: String
    let goodsName: String
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>30</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>29</string>
					<key>Timestamp</key>
					<string>753258814.850691</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Kream/Models/GoodsModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>/// model - class : 참조 타입. 클래스의 인스턴스를 복사해도 동일한 인스턴스 참조
</string>
				<key>leading</key>
				<string>}

</string>
				<key>trailing</key>
				<string>//// 글로벌한 상태를 유지해야하는 데이터를 참조 타입으로 관리함으로써 데이터 일관성과 효율적 메모리 관리 가능.
//class GoodsCountModel {
//    private let goodsDefaults = UserDefaults.standard
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
	</array>
</dict>
</plist>
